/* * AneUnrar.as * @version 0.8b *  * A simple Native Extension Wrapper to Cooliris-toolkit UnRAR class *  * You can call only one command at time. * To process commands in parallel create new AneUnRar instances. *  * Created by Pedro Casaubon on 17/06/2012. * Copyright (c)2012 Pedro Casaubon. All rights reserved. *  */package es.xperiments.xtensions{	import flash.events.ErrorEvent;	import flash.filesystem.File;	import flash.events.EventDispatcher;	import flash.events.StatusEvent;	import flash.external.ExtensionContext;	import es.xperiments.xtensions.AneUnRarEvent;		public final class AneUnRar extends EventDispatcher	{		private var _context:ExtensionContext = null;				private var _rarFile:File = null;		private var _rarFilePath:String = null;				private var _currentExtractingFileName:String;		private var _currentOutputFile:File;		private var _currentUnRarDir:File;						private var _ready:Boolean = true;		private static var _isSupported:Boolean = false;				/**		 * AneUnRar Static Initializer		 */				{			setIsSupported();		}				/**		 * AneUnRar Constructor		 */		public function AneUnRar( )		{			if ( !_context )			{				_context = ExtensionContext.createExtensionContext("es.xperiments.xtensions.AneUnRar",null);				_context.addEventListener( StatusEvent.STATUS, onContextStatusEvent );			}		}				/**		 * Asynchronously Extracts a unique file from the compressed RAR		 * 		 * @param fileName:String Path from the file to extract		 * @param outputFileName:String Path to the destination file to extract		 * @return void		 */		public function extractFileAsync( fileName:String, outputFile:File ):Boolean		{			if( !getReady() || !_rarFile || !_rarFile.exists || !outputFile ) return false;						setCurrents(fileName,outputFile);			setReady( false );			_context.call( 'extractFileAsync', _rarFilePath, fileName, outputFile.nativePath ) ;			return true;		};				/**		 * Synchronously Extracts one file from RAR to disk Synchronous		 * 		 * @param fileName:String		 * @param outputFileName:String		 * @return Boolean		 */		public function extractFileSync( fileName:String, outputFile:File ):Boolean		{			if( !getReady() || !_rarFile || !_rarFile.exists || !outputFile ) return false;						setCurrents(fileName,outputFile);									setReady( false );			var result:Boolean = _context.call( 'extractFileSync', _rarFilePath, fileName, outputFile.nativePath) as Boolean;			setReady( true );			return result;		};				/**		 * Asynchronously Extracts the RAR file to dir  		 * 		 * @param outputDir:String		 * @return void		 */		public function extractRarAsync( outputDir:File ):Boolean		{						if( !getReady() || !_rarFile || !_rarFile.exists || !outputDir ) return false;			setCurrents( null, null, outputDir );			setReady( false );			if( !outputDir.exists ) outputDir.createDirectory( );			_context.call( 'extractRarAsync', _rarFilePath, outputDir.nativePath ) ;			return true;		};				/**		 * Extracts the RAR file to dir Synchronous 		 * 		 * @param outputDir:String		 * @return Boolean		 */				public function extractRarSync( outputDir:File ):Boolean		{			if( !getReady() || !_rarFile || !_rarFile.exists || !outputDir ) return false;						setCurrents( null, null, outputDir );			setReady( false );			if( !outputDir.exists ) outputDir.createDirectory( );			var result:Boolean = _context.call( 'extractRarSync', _rarFilePath, outputDir.nativePath ) as Boolean;			setReady( true );			return result;		};				/**		 * 		 * @return void		 */		public function getFilesAsync( ):Boolean		{			if( !getReady() || !_rarFile || !_rarFile.exists ) return false;			setCurrents( );			setReady( false );			_context.call( 'getFilesAsync', _rarFilePath ) ;			return true;		};				/**		 * @return Array		 */		public function getFilesSync( ):Array		{			if( !getReady() || !_rarFile || !_rarFile.exists ) return null;			setCurrents( );			setReady( false );			var result:Array = _context.call( 'getFilesSync', _rarFilePath ) as Array;			setReady( true );			return result;		};				/**		 * @param rarFile:String		 * @return void		 */		public function openFile( rarFile:File , skipInvisibleFiles:Boolean = false ):Boolean		{			setCurrents( );			if( !rarFile || !getReady() || !rarFile.exists ) return false;			_rarFile = rarFile;			_rarFilePath = rarFile.nativePath;			_context.call("extractInvisibleFiles", skipInvisibleFiles );			return true;		};				/**		 * @param mode:Boolean		 * @return void		 */		private function setReady( mode:Boolean ):void		{			_ready = mode;		}		/**		 * Gets the instance status semaphore.		 * If status is false, some process is executing in the background.		 * You can call only one command at time.		 * To process commands in parallel create new AneUnRar instances.		 * @return Boolean		 */							public function getReady( ):Boolean		{			return _ready;		}							/**		 * Helper that sets/clears some private vars		 * 		 * @param currentExtractingFileName:String		 * @param currentOutputFile:File		 * @param currentUnRarDir:File		 */		private function setCurrents( currentExtractingFileName:String = null, currentOutputFile:File = null, currentUnRarDir:File = null ):void		{			_currentExtractingFileName = currentExtractingFileName;			_currentOutputFile = currentOutputFile;			_currentUnRarDir = currentUnRarDir;				}						/**		 * Check if the extension is supported		 * @return Boolean		 */		public static function isSupported():Boolean		{			return _isSupported;		}				/*		 * Internal Check for native support		 */		private static function setIsSupported():void		{			var ctx:ExtensionContext;			try			{				ctx = ExtensionContext.createExtensionContext("es.xperiments.xtensions.AneUnRar",null);				_isSupported = true;				ctx.dispose();				ctx = null;			}			catch(e:Error)			{				_isSupported = false;			}		}				/**		 * Dispose the AneUnRar extension		 */		public function dispose():void		{			if( _context.hasEventListener(StatusEvent.STATUS) ) _context.removeEventListener(StatusEvent.STATUS,onContextStatusEvent);						_rarFile = null;			_rarFilePath = null;			_currentExtractingFileName = null;			_currentOutputFile = null;			_currentUnRarDir =null;			_context.dispose();			_context = null;		}		/**		 * Main Native Event Listener		 */		private function onContextStatusEvent( e:StatusEvent ):void		{			setReady( true );								switch( e.code )			{					case ErrorEvent.ERROR:					dispatchEvent					(						new ErrorEvent						(							ErrorEvent.ERROR,							false,							false,							[								"AneUnRar Error executing:",e.level,								"rarFile:",_rarFilePath,								"currentUnRarDir:", _currentUnRarDir,								"currentOutputFile:", _currentOutputFile,								"currentExtractingFileName:", _currentExtractingFileName,							].join(" ")						)					);				break;				case AneUnRarEvent.ON_EXTRACT_FILE_COMPLETE:				case AneUnRarEvent.ON_EXTRACT_RAR_COMPLETE:					dispatchEvent ( new AneUnRarEvent( e.code ) );				break;								case AneUnRarEvent.ON_GET_FILES:					dispatchEvent ( new AneUnRarEvent( e.code, _context.call('getResultFromGetFilesAsync') as Array ) );				break;			}		}	}	}