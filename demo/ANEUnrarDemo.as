package{		import es.xperiments.xtensions.AneUnRar;	import es.xperiments.xtensions.AneUnRarEvent;		import flash.filesystem.File;	import flash.events.*;    import com.bit101.components.Component;    import com.bit101.components.Label;    import com.bit101.utils.MinimalConfigurator;         import flash.display.Sprite;    import flash.events.MouseEvent;    import com.bit101.components.TextArea;    import com.bit101.components.IndicatorLight;         public class ANEUnrarDemo extends Sprite    {		public var rarFile:File;		public var outputDir:File;				public var unRar:AneUnRar = null;		public var times:Number;        public var output:TextArea;				public var asyncInd:IndicatorLight;		public var syncInd:IndicatorLight;				        public function ANEUnrarDemo()        {            Component.initStage(stage);			var xml:XML = <comps>							<HBox x="13" y="10">								<VBox>									<HBox>										<Label text="ASYNC"/>										<IndicatorLight id="asyncInd" label="Processing" color="0x00ff00" isLit="false" y="4"/>									</HBox>									<PushButton label="Extract RAR" width="145" height="30" event="click:testUnrarAsync"/>									<PushButton label="Extract Single File" width="145" height="30" event="click:testExtractFileAsync"/>									<PushButton label="Get Rar Contents" width="145" height="30" event="click:testGetFilesAsync"/>								</VBox>								<VBox x="250">									<HBox>										<Label text="SYNC"/>										<IndicatorLight id="syncInd" label="Processing" color="0xff0000" isLit="false" y="4"/>									</HBox>									<PushButton label="Extract RAR" width="145" height="30" event="click:testUnrarSync"/>									<PushButton label="Extract Single File" width="145" height="30" event="click:testExtractFileSync"/>									<PushButton label="Get Rar Contents" width="145" height="30" event="click:testGetFilesSync"/>								</VBox>							</HBox>							<VBox x="13" y="140">								<TextArea id="output" width="295" height="200" x="0"></TextArea>								<PushButton label="Destroy AneUnRar instance" width="295" height="30" x="0" y="345" event="click:reCreate"/>							</VBox>						</comps>;						                           var config:MinimalConfigurator = new MinimalConfigurator(this);            config.parseXML(xml);            init();        }         						public function setTimes()		{			times = new Date().getTime();		}				public function getTimes():Number		{			return (new Date().getTime()-times);		}				public function onExtracts( e:AneUnRarEvent ):void		{			asyncInd.flash(0);			output.text += ('Processed in '+getTimes()+'\n');				output.text += ('Event => '+e.type+'\n');		}				public function onGetFiles( e:AneUnRarEvent ):void		{			asyncInd.flash(0);			output.text += ('Processed in '+getTimes()+'\n');			output.text += ('Event => '+e.type+'\n');			output.text += (e.rarFiles.join('\n') );		}				public function onError( e:ErrorEvent ):void		{			asyncInd.flash(0);			output.text += ('Processed in '+getTimes()+'\n');			output.text += ('ERROR\n' );			output.text += (e.text+'\n');					}				public function testUnrarAsync( e:Event ):void		{						asyncInd.flash(100);			setTimes();			if( unRar.extractRarAsync( outputDir ))			{				clearButton();				output.text += ('[START ASYNC] testUnrarAsync \n' );			}		}		public function testExtractFileAsync( e:Event ):void		{			asyncInd.flash(100);			setTimes();			if( unRar.extractFileAsync('sinergies_pedro/Trade Gothic LT Std/TradeGothicLTStd-Bd2.otf', File.documentsDirectory.resolvePath('output/pepe.mierdaASYNC') ) )			{				clearButton();				output.text += ('[START ASYNC] testExtractFileAsync \n' );			}		}		public function testGetFilesAsync( e:Event ):void		{			asyncInd.flash(100);						setTimes();			if( unRar.getFilesAsync( ) )			{				clearButton();				output.text += ('[START ASYNC] testGetFilesAsync \n' );			}		}						public function testUnrarSync( e:Event ):void		{			clearButton();			syncInd.isLit = true;			output.text += ('[START SYNC] testUnrarSync \n' );			setTimes();			var result:Boolean = unRar.extractRarSync( outputDir );			output.text += ( 'Processed in '+getTimes()+' with result '+( result==0 ?'false':'true')+'\n');			syncInd.isLit = false;					}		public function testExtractFileSync( e:Event ):void		{			clearButton();			syncInd.isLit = true;			output.text += ('[START SYNC] testExtractFileSync \n' );			setTimes();			var result:Boolean = unRar.extractFileSync('sinergies_pedro/Trade Gothic LT Std/TradeGothicLTStd-Bd2.otf', File.documentsDirectory.resolvePath('output/pepe.mierdaSYNC') );			output.text += ( 'Processed in '+getTimes()+' with result '+( result==0 ?'false':'true')+'\n');			syncInd.isLit = false;		}		public function testGetFilesSync( e:Event ):void		{			clearButton();			syncInd.isLit = true;			output.text += ('[START SYNC] testGetFilesSync \n' );			setTimes();			var result:Array = unRar.getFilesSync( );			output.text += ( 'Processed in '+getTimes()+'\n');			output.text+=(result.join('\n'));			syncInd.isLit = false;					}						public function clearButton( e:Event = null ):void		{			output.text ="";		}				public function reCreate( e:Event ):void		{			output.text = '[ DISPOSING INSTANCE AND RECREATING...]\n'			if( unRar!=null )			{				if( !unRar.getReady() )				{					output.text += '[ CAN NOT DISPOSE CURRENT INSTANCE IS WORKING....]\n';					return;				}				unRar.removeEventListener( AneUnRarEvent.ON_EXTRACT_RAR_COMPLETE , onExtracts );				unRar.removeEventListener( AneUnRarEvent.ON_EXTRACT_FILE_COMPLETE , onExtracts );				unRar.removeEventListener( AneUnRarEvent.ON_GET_FILES , onGetFiles );				unRar.removeEventListener(ErrorEvent.ERROR , onError );								unRar.dispose();				unRar = null;			}									unRar  = new AneUnRar();						if( unRar.openFile(rarFile) )			{				unRar.addEventListener( AneUnRarEvent.ON_EXTRACT_RAR_COMPLETE , onExtracts );				unRar.addEventListener( AneUnRarEvent.ON_EXTRACT_FILE_COMPLETE , onExtracts );				unRar.addEventListener( AneUnRarEvent.ON_GET_FILES , onGetFiles );				unRar.addEventListener(ErrorEvent.ERROR , onError );			}			output.text += '[ DISPOSING INSTANCE AND RECREATING DONE!]\n'		}				public function init():void		{						rarFile = File.applicationDirectory.resolvePath('ANErar.rar');			outputDir = File.documentsDirectory.resolvePath('output');			times = 0;						reCreate( null );						}				    }}